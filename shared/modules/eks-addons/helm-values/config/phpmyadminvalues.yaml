## Service configuration
##
service:
  ## @param service.type Kubernetes Service type
  ##
  type: ClusterIP
  ## @param service.ports.http Service HTTP port
  ## @param service.ports.https Service HTTPS port
  ##
  ports:
    http: 80
    https: 443

  ## Specify the nodePort values for the LoadBalancer and NodePort service types
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
  ## @param service.nodePorts.http Kubernetes http node port
  ## @param service.nodePorts.https Kubernetes https node port
  ##
  ## nodePorts:
  ##   http: ""
  ##   https: ""

  # Database configuration
##
db:
  ## @param db.host Database Hostname. Ignored when `db.chartName` is set.
  ## e.g:
  ## host: foo
  ##
  host: "mysql-primary"
  ## @param db.port Database port to use to connect
  ##
  port: 3306
  ## @param db.allowArbitraryServer Enable connection to arbitrary MySQL server
  ## If you do not want the user to be able to specify an arbitrary MySQL server at login time, set this to false
  ##
  allowArbitraryServer: true

  ## @param db.enableSsl Enable SSL for the connection between phpMyAdmin and the database
  ##
  enableSsl: false


## Ingress configuration
##
ingress:
  ## @param ingress.enabled Set to true to enable ingress record generation
  ##
  enabled: true
  ## @param ingress.apiVersion Force Ingress API version (automatically detected if not set)
  ##
  apiVersion: ""
  ## DEPRECATED: Use ingress.annotations instead of ingress.certManager
  ## certManager: false
  ##

  ## @param ingress.hostname When the ingress is enabled, a host pointing to this will be created
  ##
  hostname: nginx.internal.webpoint.io

  ## @param ingress.annotations Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md
  ## Use this parameter to set the required annotations for cert-manager, see
  ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
  ##
  ## e.g:
  ## annotations:
  ##   kubernetes.io/ingress.class: nginx
  ##   cert-manager.io/cluster-issuer: cluster-issuer-name
  ##
  annotations:
    kubernetes.io/ingress.class: traefik  # Assuming you're using Traefik as your ingress controller
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/router.tls.certresolver: production  # or 'staging' for testing
    traefik.ingress.kubernetes.io/router.entrypoints: websecure

    #Add the middleware https://doc.traefik.io/traefik/middlewares/http/redirectscheme/
    # traefik.ingress.kubernetes.io/router.middlewares: default-redirect-https@kubernetescrd
    # # Define the redirect middleware
    # traefik.ingress.kubernetes.io/middleware.redirectscheme.scheme: https
    # traefik.ingress.kubernetes.io/middleware.redirectscheme.permanent: "true"

  ## @param ingress.tls Enable TLS configuration for the hostname defined at `ingress.hostname` parameter
  ## TLS certificates will be retrieved from a TLS secret with name: {{- printf "%s-tls" .Values.ingress.hostname }}
  ## You can use the ingress.secrets parameter to create this TLS secret, relay on cert-manager to create it, or
  ## let the chart create self-signed certificates for you
  ##
  tls: true  # Set to true if you want to configure TLS
  # extraTls:
  #   - hosts:
  #       - nginx.internal.webpoint.io
  #     secretName: nginx.internal.webpoint.io-tls  # Traefik will automatically manage this secret
